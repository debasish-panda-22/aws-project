# 👨‍💼 Employee Database

A production-ready Python web application to manage employee records with image uploads and secure hosting. The app is deployed on an AWS EC2 instance with Nginx, SSL via Certbot, image storage in Amazon S3, and employee data managed using a SQL database.

---

## 🔧 Tech Stack

- **Backend:** Python (Flask / Django)
- **Hosting:** AWS EC2 (Ubuntu 22.04)
- **Reverse Proxy:** Nginx
- **SSL:** Let's Encrypt via Certbot
- **Database:** PostgreSQL / MySQL (local or AWS RDS)
- **File Storage:** Amazon S3
- **Python Libraries:** boto3, SQLAlchemy / Django ORM

---

## 📦 Features

- 🔐 Secure HTTPS deployment
- 📁 Upload and store employee images in S3
- 🧾 Store employee details in SQL database
- 🔁 Nginx reverse proxy for better performance
- 🧼 Clean and modular deployment setup

---

## 🚀 Deployment Steps

### 1. Launch AWS EC2 Instance

- Use Ubuntu 22.04 (t2.micro for free tier)
- Allow inbound access to ports `22`, `80`, and `443` in security group

### 2. Connect to EC2 & Install Dependencies

```bash
ssh -i your-key.pem ubuntu@<your-ec2-ip>
sudo apt update && sudo apt upgrade -y
sudo apt install python3-pip python3-venv nginx certbot python3-certbot-nginx -y
```

### 3. Clone Project & Set Up Virtual Environment

```bash
git clone https://github.com/your-username/employee-database.git
cd employee-database
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

### 4. S3 Integration (Image Uploads)

1. Create a new S3 bucket on AWS (e.g., `employee-images-bucket`)
2. Configure permissions (public-read or signed URLs)
3. Store AWS credentials in `.env` or IAM role

#### Python Upload Example:

```python
import boto3

s3 = boto3.client('s3', aws_access_key_id='YOUR_KEY', aws_secret_access_key='YOUR_SECRET')

def upload_file(file, filename):
    s3.upload_fileobj(file, 'employee-images-bucket', filename, ExtraArgs={"ACL": "public-read"})
    return f"https://employee-images-bucket.s3.amazonaws.com/{filename}"
```

### 5. SQL Database Setup

You can use PostgreSQL, MySQL, or SQLite locally for development.

#### Example: PostgreSQL (psycopg2 + SQLAlchemy)

```python
DATABASE_URL = 'postgresql://username:password@host:port/dbname'
engine = create_engine(DATABASE_URL)
```

Create a table for employee records:

```python
class Employee(Base):
    __tablename__ = 'employees'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    position = Column(String)
    image_url = Column(String)
```

### 6. Nginx Configuration

Update `/etc/nginx/sites-available/default`:

```nginx
server {
    server_name yourdomain.com www.yourdomain.com;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    client_max_body_size 100M;
}

server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;
    return 301 https://$host$request_uri;
}
```

#### Test and Restart Nginx

```bash
sudo nginx -t
sudo systemctl restart nginx
```

### 7. Enable HTTPS (SSL with Certbot)

```bash
sudo certbot --nginx
```

Follow the prompts to secure your domain with HTTPS.

Test renewal:

```bash
sudo certbot renew --dry-run
```

### 8. Cleanup Instructions

To delete everything:

```bash
sudo systemctl stop nginx
rm -rf ~/employee-database
sudo certbot delete --cert-name yourdomain.com
sudo nano /etc/nginx/sites-available/default  # clear the config
sudo systemctl reload nginx
# Then terminate the EC2 instance from AWS Console
```

---

## ✅ Status

✅ Deployment Ready  
✅ S3 Uploads Integrated  
✅ SQL Database Functional  
✅ HTTPS Secured

---

## 📄 License

This project is licensed under the MIT License.

---

## 🙌 Contributing

Feel free to fork the repo and submit pull requests. Open issues for feature requests or bugs.

---

## 📬 Contact

For support or queries, contact [yourname@domain.com](mailto:yourname@domain.com).

